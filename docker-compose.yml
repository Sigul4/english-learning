version: '3.8'

services:
  database:
    image: postgres:15.2-alpine
    container_name: database
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGUSER: postgres
    ports:
      - '5432:5432'
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      - nodeback
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready', '-d', 'db_prod']
      interval: 30s
      timeout: 40s
      retries: 10
      start_period: 10s
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: postgres
    links:
      - database
    depends_on:
      - database
    ports:
      - '3031:80'
    networks:
      - nodeback
    volumes:
      - pgadmin-data:/var/lib/pgadmin
  nodeback:
    image: nodeback
    container_name: nodeback
    restart: always
    environment:
      TZ: Europe/Kiev
      NODE_ENV: development
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
    links:
      - database
    depends_on:
      database:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./Dockerfile
    command: sh -c "npm install --force && npm run dev"
    volumes:
      - ./log:/usr/src/app/log
      - .:/usr/src/app
    networks:
      - nodeback
      #- monitoring
    ports:
      - 3000:3000
#    command: "npx knex migrate:latest"
networks:
  nodeback:
    driver: bridge
   # external: true
  #monitoring:
   # external: true
volumes:
  database:
    driver: local
  pgadmin-data:
    driver: local
